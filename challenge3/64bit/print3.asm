;To avoid null bytes, we pad moved values with 0x11 and then shift left and back right by the required number of bytes (0x38=56 bits = 7 bytes out of 64/8 = 8 bytes in 64 bit register)

section .data


section .text

global _start
_start:
xor rax, rax
xor rdi, rdi
xor rsi, rsi
xor rdx, rdx

jmp short msg
;write (int fd, char *msg, unsigned int len);
routine:
pop rsi
mov rax,0x11111101 ; syscall 1 is write in 64bit arch
shl rax, 0x38
shr rax, 0x38
mov rdi,0x11111101 ; rdi is fd
shl rdi,0x38
shr rdi,0x38
mov rdx, 0x11111109; rdx is size (9 for null byte)
shl rdx, 0x38
shr rdx, 0x38
syscall ; instead of int 0x80 for 32 bit architecture

;exit (int ret)
mov rax, 0x1111113c ; syscall 60 is exit in 64bit arch
shr rax, 0x38
shl rax, 0x38
mov rdi, 0x11111101 ; rdi is error code set to 01 to avoid null byte
shr rdi, 0x38
shl rdi, 0x38
syscall

msg:
call routine
db "Hi there",0xa
